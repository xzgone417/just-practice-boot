<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.exp.ucmp.auth.dao.AuthDao">

    <resultMap id="personResultMap" type="com.exp.ucmp.model.Person">
        <result column="party_id" property="partyId" jdbcType="BIGINT" />
        <result column="person_name" property="personName" jdbcType="VARCHAR" />
        <result column="organ_id" property="organId" jdbcType="BIGINT" />
        <result column="organ_name" property="organName" jdbcType="VARCHAR" />
        <result column="area_id" property="areaId" jdbcType="BIGINT" />
        <result column="role_id" property="roleId" jdbcType="BIGINT" />
    </resultMap>
    <resultMap id="rolePermissionResultMap" type="com.exp.ucmp.auth.dto.PermissionIdentifierDto">
        <result column="permission_id" property="permissionId" jdbcType="BIGINT" />
        <result column="permission_name" property="permissionName" jdbcType="VARCHAR" />
        <result column="permission_content" property="permissionContent" jdbcType="VARCHAR" />
        <result column="identifier_path" property="identifierPath" jdbcType="VARCHAR" />
        <result column="access_type" property="accessType" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="menuResultMap" type="com.egrid.shiro.model.Menu">
        <result column="menu_id" property="menuId" jdbcType="BIGINT" />
        <result column="menu_name" property="menuName" jdbcType="VARCHAR" />
        <result column="parent_menu_id" property="parentMenuId" jdbcType="BIGINT" />
        <result column="menu_sequence" property="menuSequence" jdbcType="BIGINT" />
        <result column="identifier_path" property="menuPath" jdbcType="VARCHAR" />
    </resultMap>
    
    <select id="selectPersonByloginname" parameterType="java.lang.String" resultMap="personResultMap">
        SELECT
            a.party_id, b.person_name, c.organ_id, c.organ_name, null area_id,roleInfo.role_id
        FROM
            t_person_info b,
            t_login_info a
                LEFT OUTER JOIN
            (SELECT
                 a.src_party_id, b.party_id organ_id, b.organ_name
             FROM
                 t_party_relationship a, t_organization_info b
             WHERE
                 a.tag_party_id = b.party_id
               AND a.relationship_type_code IN ('0101' , '0110')) c ON a.party_id = c.src_party_id
                LEFT JOIN
            (
                select
                    rel.party_id,
                    GROUP_CONCAT(rel.role_id,':',rod.role_details_name
                        SEPARATOR ',') AS role_id
                FROM
                    t_party_role_rela rel
                        inner join t_sys_role_details rod on rod.role_id = rel.role_id
                GROUP BY rel.party_id) as roleInfo on a.party_id = roleInfo.party_id
        WHERE
            a.party_id = b.party_id
                AND a.login_name = #{loginName, jdbcType=VARCHAR}
    </select>

    <select id="listRolePermissionByLoginid" resultMap="rolePermissionResultMap">
        SELECT 
            '' permission_id,
            '' permission_name,
            '' permission_content,
            a.identifier_path,
            a.access_type
        FROM
            t_resource_identifier a
        WHERE a.permission_id is null
          AND a.is_delete = '01'
          AND a.is_valid = '01'
        UNION
        SELECT 
            b.permission_id,
            b.permission_name,
            b.permission_content,
            a.identifier_path,
            a.access_type
        FROM
            t_resource_identifier a,
            (SELECT 
                a.permission_id, a.permission_name, a.permission_content
            FROM
                (SELECT 
                a.permission_id,
                    a.permission_name,
                    CONCAT(b.resource_content, ':', c.operation_name) permission_content
            FROM
                t_permission_info a, t_resource_info b, t_operation_info c
            WHERE
                a.resource_id = b.resource_id
                    AND a.operation_id = c.operation_id) a
            WHERE
                a.permission_content REGEXP (SELECT 
                        GROUP_CONCAT(a.permission_wildcards
                                SEPARATOR '|') AS permission_wildcards
                    FROM
                        t_role_permission_rela a, t_party_role_rela b
                    WHERE
                        a.role_id = b.role_id
                            AND a.permission_id IS NULL
                        <if test="roleId != null" >
                            AND b.role_id = #{roleId, jdbcType=BIGINT}
                        </if>
                            AND b.party_id = #{partyId, jdbcType=BIGINT}
                    GROUP BY b.party_id) UNION SELECT 
                a.permission_id,
                    a.permission_name,
                    CONCAT(b.resource_content, ':', c.operation_name) permission_content
            FROM
                t_permission_info a, t_resource_info b, t_operation_info c, t_party_role_rela d, t_role_permission_rela e
            WHERE
                a.resource_id = b.resource_id
                    AND a.operation_id = c.operation_id
                    AND e.role_id = d.role_id
                    AND e.permission_id = a.permission_id
                    AND e.permission_id IS NOT NULL
                <if test="roleId != null" >
                    AND d.role_id = #{roleId, jdbcType=BIGINT}
                </if>
                    AND d.party_id = #{partyId, jdbcType=BIGINT}) b
        WHERE
            a.permission_id = b.permission_id
                AND a.is_delete = '01'
                AND a.is_valid = '01'
    </select>

    <select id="permissionMenuQuery" resultMap="menuResultMap">
        SELECT 
            a.menu_id,
            a.menu_name,
            a.parent_menu_id,
            a.menu_sequence,
            c.identifier_path
        FROM
            t_menu_info a,
            t_resource_identifier c
        WHERE a.identifier_id = c.identifier_id
          AND a.is_valid = '01'
          AND a.is_delete = '01'
          AND c.is_valid = '01'
          AND c.is_delete = '01'
          AND EXISTS( SELECT identifier_id
                        FROM
                            (SELECT b.*
                               FROM
                                  (SELECT DISTINCT a.permission_id FROM
                                             (SELECT t1.permission_id,
                                                     CONCAT(CONCAT(t2.resource_content, ':'), t3.operation_name) AS permission_wildcards
                                                FROM t_permission_info t1, t_resource_info t2, t_operation_info t3
                                               WHERE t1.resource_id = t2.resource_id
                                                 AND t1.operation_id = t3.operation_id) a, 
                                             (SELECT t2.permission_id,
                                                     REPLACE(t2.permission_wildcards, '*', '%') AS permission_wildcards
                                                FROM (select
															tprr.party_id,tprr.party_role_id,tprr.role_id
														from
															t_party_role_rela tprr
														union all
														select
															tsprr.party_id,tsprr.party_role_id,tsprr.role_id
														from
															t_store_party_role_rela tsprr) t1
												inner join t_role_permission_rela t2 on t1.role_id = t2.role_id
												left join t_sys_role_details tsrd on t1.role_id = tsrd.role_id
                                               WHERE 1=1
                                             <if test="roleType != null ">
                                               	 AND tsrd.role_details_type = #{roleType}
                                             </if>
                                             <if test="roleId != null" >
                                                 AND t1.role_id = #{roleId, jdbcType=BIGINT}
                                             </if>
                                                 AND t1.party_id = #{partyId, jdbcType=BIGINT}) b
                                    WHERE (a.permission_wildcards LIKE b.permission_wildcards OR a.permission_id = b.permission_id)) a, 
                                   t_resource_identifier b
                              WHERE a.permission_id = b.permission_id 
                       UNION SELECT * FROM t_resource_identifier
                              WHERE permission_id IS NULL) b
                       WHERE a.identifier_id = b.identifier_id)
    </select>

    <select id="parentMenuQuery" resultMap="menuResultMap">
        select a.menu_id, a.menu_name, a.parent_menu_id, a.menu_sequence, b.identifier_path
          from t_menu_info a
          left outer join t_resource_identifier b on a.identifier_id = b.identifier_id
         where a.menu_id in 
               <foreach item='item' index='index' collection='menuIds' open='(' separator=',' close=')'>
                   #{item.parentMenuId}
               </foreach>
    </select>

    <select id="selectStaffById" resultType="java.util.HashMap">
		SELECT 
		    staff.staff_status,
		    staff.staff_type,
		    staff.is_delete staff_is_delete,
		    store.store_id store_id,
		    store.org_id store_orgid,
		    store.org_name store_name,
		    store.org_type store_type,
		    store.is_enable store_status,
		    partner.partner_id partner_id,
		    partner.partner_name partner_name,
		    partner.partner_join_role partner_type,
		    partner.partner_status partner_status,
		    partner.is_delete partner_is_delete
		FROM
		    (select party_id,staff_code,staff_name,staff_email,staff_sex,staff_iphone,staff_status,staff_type,is_delete from t_sys_staff_details union select party_id,staff_code,staff_name,staff_email,staff_sex,staff_iphone,staff_status,staff_type,is_delete from t_sys_store_staff_details) staff
		        LEFT OUTER JOIN
		    (SELECT 
		        distinct b.party_id, a.store_id, a.org_id, a.org_name, a.org_type, a.is_enable
		    FROM
		        t_sys_store_info a, t_sys_store_staff_info b
		    WHERE
		        a.store_id = b.store_id
		            AND b.party_id = #{partyId, jdbcType=BIGINT}) store ON store.party_id = staff.party_id
		        LEFT OUTER JOIN
		    (SELECT 
		        bb.party_id,
		        aa.partner_id,
		            aa.partner_name,
		            aa.partner_join_role,
		            aa.partner_status,
		            aa.is_delete
		    FROM
		        t_sys_partner_details aa, t_sys_partner_staff_rela bb
		    WHERE
		        aa.partner_id = bb.partner_id
		            AND bb.party_id = #{partyId, jdbcType=BIGINT}) partner ON partner.party_id = staff.party_id
		WHERE
		    staff.party_id = #{partyId, jdbcType=BIGINT}
    </select>
    

  <resultMap id="sysMenuExtendedInfoResultMap" type="com.exp.ucmp.entity.SysMenuExtendedInfoEntity" >
      <constructor>
       <idArg column="menu_id" javaType="Long" jdbcType="BIGINT"/>
    </constructor>
    <result column="menu_path" property="menuPath" jdbcType="VARCHAR" />
    <result column="created_by" property="createdBy" jdbcType="BIGINT" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="updated_by" property="updatedBy" jdbcType="BIGINT" />
    <result column="updated_date" property="updatedDate" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <select id="selectMenuExtendedInfo" parameterType="com.exp.ucmp.entity.SysMenuExtendedInfoEntity" resultMap="sysMenuExtendedInfoResultMap">
    SELECT 
         a.menu_id,
         a.menu_path,
         a.created_by,
         a.created_date,
         a.updated_by,
         a.updated_date
      FROM t_sys_menu_extended_info a
      <trim prefix="WHERE" prefixOverrides="AND" >
        <if test="menuId != null" >
          AND a.menu_id = #{menuId, jdbcType=BIGINT}
        </if>
        <if test="menuPath != null and menuPath != ''" >
          AND a.menu_path = #{menuPath, jdbcType=VARCHAR}
        </if>
        <if test="createdBy != null" >
          AND a.created_by = #{createdBy, jdbcType=BIGINT}
        </if>
        <if test="createdDate != null" >
          AND a.created_date = #{createdDate, jdbcType=TIMESTAMP}
        </if>
        <if test="updatedBy != null" >
          AND a.updated_by = #{updatedBy, jdbcType=BIGINT}
        </if>
        <if test="updatedDate != null" >
          AND a.updated_date = #{updatedDate, jdbcType=TIMESTAMP}
        </if>
      </trim>
  </select>
  
  <select id="getRoleType" resultType="String">
  	select
		tsrd.role_details_type
	from
		t_party_role_rela tprr,
		t_sys_role_details tsrd
	where
		tprr.role_id = tsrd.role_id
		and tprr.party_id = #{partyId}
	union
	select
		tsrd.role_details_type
	from
		t_store_party_role_rela tsprr,
		t_sys_role_details tsrd
	where
		tsprr.role_id = tsrd.role_id
		and tsprr.party_id = #{partyId}
  </select>
  
  <select id="checkStroe" resultType="java.lang.String">
  select
		 td.dict_value 
	from
		t_sys_datadict td
	where
		td.dict_code = '3001'
		and td.dict_value = #{orgId}
  </select>
  
  <select id="checkIsControls" resultType="java.lang.String">
  select
		 td.dict_value 
	from
		t_sys_datadict td
	where
		td.dict_code = '3002'
  </select>
</mapper>